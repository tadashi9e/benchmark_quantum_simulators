---- circuit ----
TestProc_ADD{
 Integer.hadamard{
  H[0],
  H[1],
  H[2],
  H[3]
 },
 Integer.hadamard{
  H[4],
  H[5],
  H[6],
  H[7]
 },
 Integer.xor{
  CX[4,8],
  CX[5,9],
  CX[6,10],
  CX[7,11]
 },
 Integer.add{
  Carry[12,0,4,13]{ ccx[0,4,13], cx[0,4], ccx[12,4,13] },
  Carry[13,1,5,14]{ ccx[1,5,14], cx[1,5], ccx[13,5,14] },
  Carry[14,2,6,15]{ ccx[2,6,15], cx[2,6], ccx[14,6,15] },
  Carry[15,3,7,16]{ ccx[3,7,16], cx[3,7], ccx[15,7,16] },
  CX[3,7],
  Sum[15,3,7]{ cx[3,7], cx[15,7] },
  RCarry[14,2,6,15]{ ccx[14,6,15], cx[2,6], ccx[2,6,15] },
  Sum[14,2,6]{ cx[2,6], cx[14,6] },
  RCarry[13,1,5,14]{ ccx[13,5,14], cx[1,5], ccx[1,5,14] },
  Sum[13,1,5]{ cx[1,5], cx[13,5] },
  RCarry[12,0,4,13]{ ccx[12,4,13], cx[0,4], ccx[0,4,13] },
  Sum[12,0,4]{ cx[0,4], cx[12,4] }
 }
}
a =Integer[0,1,2,3]
b0=Integer[8,9,10,11]
b =Integer[4,5,6,7,16]
---- simulator ----
Circuit(17).h[0].h[1].h[2].h[3].h[4].h[5].h[6].h[7].cx[4, 8].cx[5, 9].cx[6, 10].cx[7, 11].ccx[0, 4, 13].cx[0, 4].ccx[12, 4, 13].ccx[1, 5, 14].cx[1, 5].ccx[13, 5, 14].ccx[2, 6, 15].cx[2, 6].ccx[14, 6, 15].ccx[3, 7, 16].cx[3, 7].ccx[15, 7, 16].cx[3, 7].cx[3, 7].cx[15, 7].ccx[14, 6, 15].cx[2, 6].ccx[2, 6, 15].cx[2, 6].cx[14, 6].ccx[13, 5, 14].cx[1, 5].ccx[1, 5, 14].cx[1, 5].cx[13, 5].ccx[12, 4, 13].cx[0, 4].ccx[0, 4, 13].cx[0, 4].cx[12, 4]
---- result ----
Counter({'10010000111000001': 1}) OK 9+7=16
Counter({'00101101111000000': 1}) OK 4+7=11
Counter({'10001000000000000': 1}) OK 1+0=1
Counter({'11010110110100001': 1}) OK 11+11=22
Counter({'10100111100100000': 1}) OK 5+9=14
Counter({'11000011100100000': 1}) OK 3+9=12
Counter({'10000101100100000': 1}) OK 1+9=10
Counter({'01010110001100001': 1}) OK 10+12=22
Counter({'10001110011000000': 1}) OK 1+6=7
Counter({'11011111001000000': 1}) OK 11+4=15
TIME_ADD: 1.846 sec
---- circuit ----
TestProc_SUB{
 Integer.hadamard{
  H[0],
  H[1],
  H[2],
  H[3]
 },
 Integer.hadamard{
  H[4],
  H[5],
  H[6],
  H[7]
 },
 Integer.xor{
  CX[4,8],
  CX[5,9],
  CX[6,10],
  CX[7,11]
 },
 Integer.sub{
  RSum[12,0,4]{ cx[12,4], cx[0,4] },
  Carry[12,0,4,13]{ ccx[0,4,13], cx[0,4], ccx[12,4,13] },
  RSum[13,1,5]{ cx[13,5], cx[1,5] },
  Carry[13,1,5,14]{ ccx[1,5,14], cx[1,5], ccx[13,5,14] },
  RSum[14,2,6]{ cx[14,6], cx[2,6] },
  Carry[14,2,6,15]{ ccx[2,6,15], cx[2,6], ccx[14,6,15] },
  RSum[15,3,7]{ cx[15,7], cx[3,7] },
  CX[3,7],
  RCarry[15,3,7,16]{ ccx[15,7,16], cx[3,7], ccx[3,7,16] },
  RCarry[14,2,6,15]{ ccx[14,6,15], cx[2,6], ccx[2,6,15] },
  RCarry[13,1,5,14]{ ccx[13,5,14], cx[1,5], ccx[1,5,14] },
  RCarry[12,0,4,13]{ ccx[12,4,13], cx[0,4], ccx[0,4,13] }
 }
}
a =Integer[0,1,2,3]
b0=Integer[8,9,10,11]
b =Integer[4,5,6,7,16]
---- simulator ----
Circuit(17).h[0].h[1].h[2].h[3].h[4].h[5].h[6].h[7].cx[4, 8].cx[5, 9].cx[6, 10].cx[7, 11].cx[12, 4].cx[0, 4].ccx[0, 4, 13].cx[0, 4].ccx[12, 4, 13].cx[13, 5].cx[1, 5].ccx[1, 5, 14].cx[1, 5].ccx[13, 5, 14].cx[14, 6].cx[2, 6].ccx[2, 6, 15].cx[2, 6].ccx[14, 6, 15].cx[15, 7].cx[3, 7].cx[3, 7].ccx[15, 7, 16].cx[3, 7].ccx[3, 7, 16].ccx[14, 6, 15].cx[2, 6].ccx[2, 6, 15].ccx[13, 5, 14].cx[1, 5].ccx[1, 5, 14].ccx[12, 4, 13].cx[0, 4].ccx[0, 4, 13]
---- result ----
Counter({'10111000011100000': 1}) OK 14-13=1
Counter({'10110001101000001': 1}) OK 5-13=-8
Counter({'11110010110000001': 1}) OK 3-15=-12
Counter({'00110001001000001': 1}) OK 4-12=-8
Counter({'10010011101000001': 1}) OK 5-9=-4
Counter({'01000111000000001': 1}) OK 0-2=-2
Counter({'11111111011100001': 1}) OK 14-15=-1
Counter({'01111111101100001': 1}) OK 13-14=-1
Counter({'11101101010000001': 1}) OK 2-7=-5
Counter({'11000001110100000': 1}) OK 11-3=8
TIME_SUB: 1.719 sec
---- circuit ----
MODULOADD{
 MODULOADD.init{
  Integer.hadamard{
   H[0],
   H[1]
  },
  Integer.hadamard{
   H[3],
   H[4]
  },
  Integer.init{
   X[8]
  },
  Integer.hadamard{
   H[6],
   H[7]
  },
  Integer.xor{
   CX[3,9],
   CX[4,10],
   CX[5,11]
  }
 },
 MODULOADD.main{
  Integer.add{
   Carry[12,0,3,13]{ ccx[0,3,13], cx[0,3], ccx[12,3,13] },
   Carry[13,1,4,14]{ ccx[1,4,14], cx[1,4], ccx[13,4,14] },
   Carry[14,2,5,15]{ ccx[2,5,15], cx[2,5], ccx[14,5,15] },
   CX[2,5],
   Sum[14,2,5]{ cx[2,5], cx[14,5] },
   RCarry[13,1,4,14]{ ccx[13,4,14], cx[1,4], ccx[1,4,14] },
   Sum[13,1,4]{ cx[1,4], cx[13,4] },
   RCarry[12,0,3,13]{ ccx[12,3,13], cx[0,3], ccx[0,3,13] },
   Sum[12,0,3]{ cx[0,3], cx[12,3] }
  },
  Integer.sub{
   RSum[12,6,3]{ cx[12,3], cx[6,3] },
   Carry[12,6,3,13]{ ccx[6,3,13], cx[6,3], ccx[12,3,13] },
   RSum[13,7,4]{ cx[13,4], cx[7,4] },
   Carry[13,7,4,14]{ ccx[7,4,14], cx[7,4], ccx[13,4,14] },
   RSum[14,8,5]{ cx[14,5], cx[8,5] },
   CX[8,5],
   RCarry[14,8,5,15]{ ccx[14,5,15], cx[8,5], ccx[8,5,15] },
   RCarry[13,7,4,14]{ ccx[13,4,14], cx[7,4], ccx[7,4,14] },
   RCarry[12,6,3,13]{ ccx[12,3,13], cx[6,3], ccx[6,3,13] }
  },
  CX[15,12],
  Integer.cswap{
   CSWAP[12,6,13],
   CSWAP[12,7,14],
   CSWAP[12,8,16]
  },
  Integer.add{
   Carry[17,13,3,18]{ ccx[13,3,18], cx[13,3], ccx[17,3,18] },
   Carry[18,14,4,19]{ ccx[14,4,19], cx[14,4], ccx[18,4,19] },
   Carry[19,16,5,15]{ ccx[16,5,15], cx[16,5], ccx[19,5,15] },
   CX[16,5],
   Sum[19,16,5]{ cx[16,5], cx[19,5] },
   RCarry[18,14,4,19]{ ccx[18,4,19], cx[14,4], ccx[14,4,19] },
   Sum[18,14,4]{ cx[14,4], cx[18,4] },
   RCarry[17,13,3,18]{ ccx[17,3,18], cx[13,3], ccx[13,3,18] },
   Sum[17,13,3]{ cx[13,3], cx[17,3] }
  },
  Integer.cswap{
   CSWAP[12,6,13],
   CSWAP[12,7,14],
   CSWAP[12,8,16]
  }
 },
 MODULOADD_freeflag{
  Integer.sub{
   RSum[13,0,3]{ cx[13,3], cx[0,3] },
   Carry[13,0,3,14]{ ccx[0,3,14], cx[0,3], ccx[13,3,14] },
   RSum[14,1,4]{ cx[14,4], cx[1,4] },
   Carry[14,1,4,16]{ ccx[1,4,16], cx[1,4], ccx[14,4,16] },
   RSum[16,2,5]{ cx[16,5], cx[2,5] },
   CX[2,5],
   RCarry[16,2,5,15]{ ccx[16,5,15], cx[2,5], ccx[2,5,15] },
   RCarry[14,1,4,16]{ ccx[14,4,16], cx[1,4], ccx[1,4,16] },
   RCarry[13,0,3,14]{ ccx[13,3,14], cx[0,3], ccx[0,3,14] }
  },
  X[15],
  CX[15,12],
  X[15],
  Integer.add{
   Carry[13,0,3,14]{ ccx[0,3,14], cx[0,3], ccx[13,3,14] },
   Carry[14,1,4,16]{ ccx[1,4,16], cx[1,4], ccx[14,4,16] },
   Carry[16,2,5,15]{ ccx[2,5,15], cx[2,5], ccx[16,5,15] },
   CX[2,5],
   Sum[16,2,5]{ cx[2,5], cx[16,5] },
   RCarry[14,1,4,16]{ ccx[14,4,16], cx[1,4], ccx[1,4,16] },
   Sum[14,1,4]{ cx[1,4], cx[14,4] },
   RCarry[13,0,3,14]{ ccx[13,3,14], cx[0,3], ccx[0,3,14] },
   Sum[13,0,3]{ cx[0,3], cx[13,3] }
  }
 }
}
a =Integer[0,1,2]
b0=Integer[9,10,11]
n =Integer[6,7,8]
b =Integer[3,4,5,15]
---- simulator ----
Circuit(20).h[0].h[1].h[3].h[4].x[8].h[6].h[7].cx[3, 9].cx[4, 10].cx[5, 11].ccx[0, 3, 13].cx[0, 3].ccx[12, 3, 13].ccx[1, 4, 14].cx[1, 4].ccx[13, 4, 14].ccx[2, 5, 15].cx[2, 5].ccx[14, 5, 15].cx[2, 5].cx[2, 5].cx[14, 5].ccx[13, 4, 14].cx[1, 4].ccx[1, 4, 14].cx[1, 4].cx[13, 4].ccx[12, 3, 13].cx[0, 3].ccx[0, 3, 13].cx[0, 3].cx[12, 3].cx[12, 3].cx[6, 3].ccx[6, 3, 13].cx[6, 3].ccx[12, 3, 13].cx[13, 4].cx[7, 4].ccx[7, 4, 14].cx[7, 4].ccx[13, 4, 14].cx[14, 5].cx[8, 5].cx[8, 5].ccx[14, 5, 15].cx[8, 5].ccx[8, 5, 15].ccx[13, 4, 14].cx[7, 4].ccx[7, 4, 14].ccx[12, 3, 13].cx[6, 3].ccx[6, 3, 13].cx[15, 12].ccx[12, 6, 13].ccx[12, 13, 6].ccx[12, 6, 13].ccx[12, 7, 14].ccx[12, 14, 7].ccx[12, 7, 14].ccx[12, 8, 16].ccx[12, 16, 8].ccx[12, 8, 16].ccx[13, 3, 18].cx[13, 3].ccx[17, 3, 18].ccx[14, 4, 19].cx[14, 4].ccx[18, 4, 19].ccx[16, 5, 15].cx[16, 5].ccx[19, 5, 15].cx[16, 5].cx[16, 5].cx[19, 5].ccx[18, 4, 19].cx[14, 4].ccx[14, 4, 19].cx[14, 4].cx[18, 4].ccx[17, 3, 18].cx[13, 3].ccx[13, 3, 18].cx[13, 3].cx[17, 3].ccx[12, 6, 13].ccx[12, 13, 6].ccx[12, 6, 13].ccx[12, 7, 14].ccx[12, 14, 7].ccx[12, 7, 14].ccx[12, 8, 16].ccx[12, 16, 8].ccx[12, 8, 16].cx[13, 3].cx[0, 3].ccx[0, 3, 14].cx[0, 3].ccx[13, 3, 14].cx[14, 4].cx[1, 4].ccx[1, 4, 16].cx[1, 4].ccx[14, 4, 16].cx[16, 5].cx[2, 5].cx[2, 5].ccx[16, 5, 15].cx[2, 5].ccx[2, 5, 15].ccx[14, 4, 16].cx[1, 4].ccx[1, 4, 16].ccx[13, 3, 14].cx[0, 3].ccx[0, 3, 14].x[15].cx[15, 12].x[15].ccx[0, 3, 14].cx[0, 3].ccx[13, 3, 14].ccx[1, 4, 16].cx[1, 4].ccx[14, 4, 16].ccx[2, 5, 15].cx[2, 5].ccx[16, 5, 15].cx[2, 5].cx[2, 5].cx[16, 5].ccx[14, 4, 16].cx[1, 4].ccx[1, 4, 16].cx[1, 4].cx[14, 4].ccx[13, 3, 14].cx[0, 3].ccx[0, 3, 14].cx[0, 3].cx[13, 3]
---- result ----
Counter({'01000101101000000000': 1}) OK 2+2 mod 6 = 4
Counter({'10000000111000000000': 1}) OK 1+3 mod 4 = 0
Counter({'11010010111000000000': 1}) OK 3+3 mod 5 = 1
Counter({'01000000101000000000': 1}) OK 2+2 mod 4 = 0
Counter({'00001001101000000000': 1}) OK 0+2 mod 6 = 2
Counter({'01011011110000000000': 1}) OK 2+1 mod 7 = 3
Counter({'11011010100000000000': 1}) OK 3+0 mod 5 = 3
Counter({'01011001110000000000': 1}) OK 2+1 mod 6 = 3
Counter({'00010000110000000000': 1}) OK 0+1 mod 4 = 1
Counter({'00010001110000000000': 1}) OK 0+1 mod 6 = 1
TIME_MODULOADD: 34.623 sec
