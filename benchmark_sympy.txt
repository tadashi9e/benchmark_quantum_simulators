---- circuit ----
TestProc_ADD{
 Integer.hadamard{
  H[0],
  H[1],
  H[2],
  H[3]
 },
 Integer.hadamard{
  H[4],
  H[5],
  H[6],
  H[7]
 },
 Integer.xor{
  CX[4,8],
  CX[5,9],
  CX[6,10],
  CX[7,11]
 },
 Integer.add{
  Carry[12,0,4,13]{ ccx[0,4,13], cx[0,4], ccx[12,4,13] },
  Carry[13,1,5,14]{ ccx[1,5,14], cx[1,5], ccx[13,5,14] },
  Carry[14,2,6,15]{ ccx[2,6,15], cx[2,6], ccx[14,6,15] },
  Carry[15,3,7,16]{ ccx[3,7,16], cx[3,7], ccx[15,7,16] },
  CX[3,7],
  Sum[15,3,7]{ cx[3,7], cx[15,7] },
  RCarry[14,2,6,15]{ ccx[14,6,15], cx[2,6], ccx[2,6,15] },
  Sum[14,2,6]{ cx[2,6], cx[14,6] },
  RCarry[13,1,5,14]{ ccx[13,5,14], cx[1,5], ccx[1,5,14] },
  Sum[13,1,5]{ cx[1,5], cx[13,5] },
  RCarry[12,0,4,13]{ ccx[12,4,13], cx[0,4], ccx[0,4,13] },
  Sum[12,0,4]{ cx[0,4], cx[12,4] }
 }
}
a =Integer[0,1,2,3]
b0=Integer[8,9,10,11]
b =Integer[4,5,6,7,16]
---- simulator ----
CNOT(12,4)*CNOT(0,4)*C((0,4),X(13))*CNOT(0,4)*C((12,4),X(13))*CNOT(13,5)*CNOT(1,5)*C((1,5),X(14))*CNOT(1,5)*C((13,5),X(14))*CNOT(14,6)*CNOT(2,6)*C((2,6),X(15))*CNOT(2,6)*C((14,6),X(15))*CNOT(15,7)*C((15,7),X(16))*CNOT(3,7)*C((3,7),X(16))*C((14,6),X(15))*CNOT(2,6)*C((2,6),X(15))*C((13,5),X(14))*CNOT(1,5)*C((1,5),X(14))*C((12,4),X(13))*CNOT(0,4)*C((0,4),X(13))*CNOT(7,11)*CNOT(6,10)*CNOT(5,9)*CNOT(4,8)*H(7)*H(6)*H(5)*H(4)*H(3)*H(2)*H(1)*H(0)*|00000000000000000>
---- result ----
[(|00000000000000000>, 1/256), (|00000000000010001>, 1/256), (|00000000000100010>, 1/256), (|00000000000110011>, 1/256), (|00000000001000100>, 1/256), (|00000000001010101>, 1/256), (|00000000001100110>, 1/256), (|00000000001110111>, 1/256), (|00000000010001000>, 1/256), (|00000000010011001>, 1/256), (|00000000010101010>, 1/256), (|00000000010111011>, 1/256), (|00000000011001100>, 1/256), (|00000000011011101>, 1/256), (|00000000011101110>, 1/256), (|00000000011111111>, 1/256), (|00000000100010000>, 1/256), (|00000000100100001>, 1/256), (|00000000100110010>, 1/256), (|00000000101000011>, 1/256), (|00000000101010100>, 1/256), (|00000000101100101>, 1/256), (|00000000101110110>, 1/256), (|00000000110000111>, 1/256), (|00000000110011000>, 1/256), (|00000000110101001>, 1/256), (|00000000110111010>, 1/256), (|00000000111001011>, 1/256), (|00000000111011100>, 1/256), (|00000000111101101>, 1/256), (|00000000111111110>, 1/256), (|00000001000100000>, 1/256), (|00000001000110001>, 1/256), (|00000001001000010>, 1/256), (|00000001001010011>, 1/256), (|00000001001100100>, 1/256), (|00000001001110101>, 1/256), (|00000001010000110>, 1/256), (|00000001010010111>, 1/256), (|00000001010101000>, 1/256), (|00000001010111001>, 1/256), (|00000001011001010>, 1/256), (|00000001011011011>, 1/256), (|00000001011101100>, 1/256), (|00000001011111101>, 1/256), (|00000001100110000>, 1/256), (|00000001101000001>, 1/256), (|00000001101010010>, 1/256), (|00000001101100011>, 1/256), (|00000001101110100>, 1/256), (|00000001110000101>, 1/256), (|00000001110010110>, 1/256), (|00000001110100111>, 1/256), (|00000001110111000>, 1/256), (|00000001111001001>, 1/256), (|00000001111011010>, 1/256), (|00000001111101011>, 1/256), (|00000001111111100>, 1/256), (|00000010001000000>, 1/256), (|00000010001010001>, 1/256), (|00000010001100010>, 1/256), (|00000010001110011>, 1/256), (|00000010010000100>, 1/256), (|00000010010010101>, 1/256), (|00000010010100110>, 1/256), (|00000010010110111>, 1/256), (|00000010011001000>, 1/256), (|00000010011011001>, 1/256), (|00000010011101010>, 1/256), (|00000010011111011>, 1/256), (|00000010101010000>, 1/256), (|00000010101100001>, 1/256), (|00000010101110010>, 1/256), (|00000010110000011>, 1/256), (|00000010110010100>, 1/256), (|00000010110100101>, 1/256), (|00000010110110110>, 1/256), (|00000010111000111>, 1/256), (|00000010111011000>, 1/256), (|00000010111101001>, 1/256), (|00000010111111010>, 1/256), (|00000011001100000>, 1/256), (|00000011001110001>, 1/256), (|00000011010000010>, 1/256), (|00000011010010011>, 1/256), (|00000011010100100>, 1/256), (|00000011010110101>, 1/256), (|00000011011000110>, 1/256), (|00000011011010111>, 1/256), (|00000011011101000>, 1/256), (|00000011011111001>, 1/256), (|00000011101110000>, 1/256), (|00000011110000001>, 1/256), (|00000011110010010>, 1/256), (|00000011110100011>, 1/256), (|00000011110110100>, 1/256), (|00000011111000101>, 1/256), (|00000011111010110>, 1/256), (|00000011111100111>, 1/256), (|00000011111111000>, 1/256), (|00000100010000000>, 1/256), (|00000100010010001>, 1/256), (|00000100010100010>, 1/256), (|00000100010110011>, 1/256), (|00000100011000100>, 1/256), (|00000100011010101>, 1/256), (|00000100011100110>, 1/256), (|00000100011110111>, 1/256), (|00000100110010000>, 1/256), (|00000100110100001>, 1/256), (|00000100110110010>, 1/256), (|00000100111000011>, 1/256), (|00000100111010100>, 1/256), (|00000100111100101>, 1/256), (|00000100111110110>, 1/256), (|00000101010100000>, 1/256), (|00000101010110001>, 1/256), (|00000101011000010>, 1/256), (|00000101011010011>, 1/256), (|00000101011100100>, 1/256), (|00000101011110101>, 1/256), (|00000101110110000>, 1/256), (|00000101111000001>, 1/256), (|00000101111010010>, 1/256), (|00000101111100011>, 1/256), (|00000101111110100>, 1/256), (|00000110011000000>, 1/256), (|00000110011010001>, 1/256), (|00000110011100010>, 1/256), (|00000110011110011>, 1/256), (|00000110111010000>, 1/256), (|00000110111100001>, 1/256), (|00000110111110010>, 1/256), (|00000111011100000>, 1/256), (|00000111011110001>, 1/256), (|00000111111110000>, 1/256), (|10000000100001111>, 1/256), (|10000001000001110>, 1/256), (|10000001000011111>, 1/256), (|10000001100001101>, 1/256), (|10000001100011110>, 1/256), (|10000001100101111>, 1/256), (|10000010000001100>, 1/256), (|10000010000011101>, 1/256), (|10000010000101110>, 1/256), (|10000010000111111>, 1/256), (|10000010100001011>, 1/256), (|10000010100011100>, 1/256), (|10000010100101101>, 1/256), (|10000010100111110>, 1/256), (|10000010101001111>, 1/256), (|10000011000001010>, 1/256), (|10000011000011011>, 1/256), (|10000011000101100>, 1/256), (|10000011000111101>, 1/256), (|10000011001001110>, 1/256), (|10000011001011111>, 1/256), (|10000011100001001>, 1/256), (|10000011100011010>, 1/256), (|10000011100101011>, 1/256), (|10000011100111100>, 1/256), (|10000011101001101>, 1/256), (|10000011101011110>, 1/256), (|10000011101101111>, 1/256), (|10000100000001000>, 1/256), (|10000100000011001>, 1/256), (|10000100000101010>, 1/256), (|10000100000111011>, 1/256), (|10000100001001100>, 1/256), (|10000100001011101>, 1/256), (|10000100001101110>, 1/256), (|10000100001111111>, 1/256), (|10000100100000111>, 1/256), (|10000100100011000>, 1/256), (|10000100100101001>, 1/256), (|10000100100111010>, 1/256), (|10000100101001011>, 1/256), (|10000100101011100>, 1/256), (|10000100101101101>, 1/256), (|10000100101111110>, 1/256), (|10000100110001111>, 1/256), (|10000101000000110>, 1/256), (|10000101000010111>, 1/256), (|10000101000101000>, 1/256), (|10000101000111001>, 1/256), (|10000101001001010>, 1/256), (|10000101001011011>, 1/256), (|10000101001101100>, 1/256), (|10000101001111101>, 1/256), (|10000101010001110>, 1/256), (|10000101010011111>, 1/256), (|10000101100000101>, 1/256), (|10000101100010110>, 1/256), (|10000101100100111>, 1/256), (|10000101100111000>, 1/256), (|10000101101001001>, 1/256), (|10000101101011010>, 1/256), (|10000101101101011>, 1/256), (|10000101101111100>, 1/256), (|10000101110001101>, 1/256), (|10000101110011110>, 1/256), (|10000101110101111>, 1/256), (|10000110000000100>, 1/256), (|10000110000010101>, 1/256), (|10000110000100110>, 1/256), (|10000110000110111>, 1/256), (|10000110001001000>, 1/256), (|10000110001011001>, 1/256), (|10000110001101010>, 1/256), (|10000110001111011>, 1/256), (|10000110010001100>, 1/256), (|10000110010011101>, 1/256), (|10000110010101110>, 1/256), (|10000110010111111>, 1/256), (|10000110100000011>, 1/256), (|10000110100010100>, 1/256), (|10000110100100101>, 1/256), (|10000110100110110>, 1/256), (|10000110101000111>, 1/256), (|10000110101011000>, 1/256), (|10000110101101001>, 1/256), (|10000110101111010>, 1/256), (|10000110110001011>, 1/256), (|10000110110011100>, 1/256), (|10000110110101101>, 1/256), (|10000110110111110>, 1/256), (|10000110111001111>, 1/256), (|10000111000000010>, 1/256), (|10000111000010011>, 1/256), (|10000111000100100>, 1/256), (|10000111000110101>, 1/256), (|10000111001000110>, 1/256), (|10000111001010111>, 1/256), (|10000111001101000>, 1/256), (|10000111001111001>, 1/256), (|10000111010001010>, 1/256), (|10000111010011011>, 1/256), (|10000111010101100>, 1/256), (|10000111010111101>, 1/256), (|10000111011001110>, 1/256), (|10000111011011111>, 1/256), (|10000111100000001>, 1/256), (|10000111100010010>, 1/256), (|10000111100100011>, 1/256), (|10000111100110100>, 1/256), (|10000111101000101>, 1/256), (|10000111101010110>, 1/256), (|10000111101100111>, 1/256), (|10000111101111000>, 1/256), (|10000111110001001>, 1/256), (|10000111110011010>, 1/256), (|10000111110101011>, 1/256), (|10000111110111100>, 1/256), (|10000111111001101>, 1/256), (|10000111111011110>, 1/256), (|10000111111101111>, 1/256)]
|10000110001011001> OK 9+12=21
|10000100101101101> OK 13+9=22
|10000101101101011> OK 11+11=22
|10000010000101110> OK 14+4=18
|00000010101100001> OK 1+5=6
|00000100110100001> OK 1+9=10
|00000010110110110> OK 6+5=11
|10000101100000101> OK 5+11=16
|00000101010100000> OK 0+10=10
|00000100011110111> OK 7+8=15
TIME_ADD: 199.545 sec
---- circuit ----
TestProc_SUB{
 Integer.hadamard{
  H[0],
  H[1],
  H[2],
  H[3]
 },
 Integer.hadamard{
  H[4],
  H[5],
  H[6],
  H[7]
 },
 Integer.xor{
  CX[4,8],
  CX[5,9],
  CX[6,10],
  CX[7,11]
 },
 Integer.sub{
  RSum[12,0,4]{ cx[12,4], cx[0,4] },
  Carry[12,0,4,13]{ ccx[0,4,13], cx[0,4], ccx[12,4,13] },
  RSum[13,1,5]{ cx[13,5], cx[1,5] },
  Carry[13,1,5,14]{ ccx[1,5,14], cx[1,5], ccx[13,5,14] },
  RSum[14,2,6]{ cx[14,6], cx[2,6] },
  Carry[14,2,6,15]{ ccx[2,6,15], cx[2,6], ccx[14,6,15] },
  RSum[15,3,7]{ cx[15,7], cx[3,7] },
  CX[3,7],
  RCarry[15,3,7,16]{ ccx[15,7,16], cx[3,7], ccx[3,7,16] },
  RCarry[14,2,6,15]{ ccx[14,6,15], cx[2,6], ccx[2,6,15] },
  RCarry[13,1,5,14]{ ccx[13,5,14], cx[1,5], ccx[1,5,14] },
  RCarry[12,0,4,13]{ ccx[12,4,13], cx[0,4], ccx[0,4,13] }
 }
}
a =Integer[0,1,2,3]
b0=Integer[8,9,10,11]
b =Integer[4,5,6,7,16]
---- simulator ----
C((0,4),X(13))*CNOT(0,4)*C((12,4),X(13))*C((1,5),X(14))*CNOT(1,5)*C((13,5),X(14))*C((2,6),X(15))*CNOT(2,6)*C((14,6),X(15))*C((3,7),X(16))*CNOT(3,7)*C((15,7),X(16))*CNOT(15,7)*C((14,6),X(15))*CNOT(2,6)*C((2,6),X(15))*CNOT(2,6)*CNOT(14,6)*C((13,5),X(14))*CNOT(1,5)*C((1,5),X(14))*CNOT(1,5)*CNOT(13,5)*C((12,4),X(13))*CNOT(0,4)*C((0,4),X(13))*CNOT(0,4)*CNOT(12,4)*CNOT(7,11)*CNOT(6,10)*CNOT(5,9)*CNOT(4,8)*H(7)*H(6)*H(5)*H(4)*H(3)*H(2)*H(1)*H(0)*|00000000000000000>
---- result ----
|00000111001110111> OK 14-7=7
|10000000010010111> OK 0-7=-7
|00000101000110111> OK 10-7=3
|00000111111100001> OK 15-1=14
|00000101010010001> OK 10-1=9
|00000111011010001> OK 14-1=13
|10000010001111101> OK 4-13=-9
|10000100110111110> OK 9-14=-5
|00000100110000001> OK 9-1=8
|00000111001101000> OK 14-8=6
TIME_SUB: 199.848 sec
---- circuit ----
MODULOADD{
 MODULOADD.init{
  Integer.hadamard{
   H[0],
   H[1]
  },
  Integer.hadamard{
   H[3],
   H[4]
  },
  Integer.init{
   X[8]
  },
  Integer.hadamard{
   H[6],
   H[7]
  },
  Integer.xor{
   CX[3,9],
   CX[4,10],
   CX[5,11]
  }
 },
 MODULOADD.main{
  Integer.add{
   Carry[12,0,3,13]{ ccx[0,3,13], cx[0,3], ccx[12,3,13] },
   Carry[13,1,4,14]{ ccx[1,4,14], cx[1,4], ccx[13,4,14] },
   Carry[14,2,5,15]{ ccx[2,5,15], cx[2,5], ccx[14,5,15] },
   CX[2,5],
   Sum[14,2,5]{ cx[2,5], cx[14,5] },
   RCarry[13,1,4,14]{ ccx[13,4,14], cx[1,4], ccx[1,4,14] },
   Sum[13,1,4]{ cx[1,4], cx[13,4] },
   RCarry[12,0,3,13]{ ccx[12,3,13], cx[0,3], ccx[0,3,13] },
   Sum[12,0,3]{ cx[0,3], cx[12,3] }
  },
  Integer.sub{
   RSum[12,6,3]{ cx[12,3], cx[6,3] },
   Carry[12,6,3,13]{ ccx[6,3,13], cx[6,3], ccx[12,3,13] },
   RSum[13,7,4]{ cx[13,4], cx[7,4] },
   Carry[13,7,4,14]{ ccx[7,4,14], cx[7,4], ccx[13,4,14] },
   RSum[14,8,5]{ cx[14,5], cx[8,5] },
   CX[8,5],
   RCarry[14,8,5,15]{ ccx[14,5,15], cx[8,5], ccx[8,5,15] },
   RCarry[13,7,4,14]{ ccx[13,4,14], cx[7,4], ccx[7,4,14] },
   RCarry[12,6,3,13]{ ccx[12,3,13], cx[6,3], ccx[6,3,13] }
  },
  CX[15,12],
  Integer.cswap{
   CSWAP[12,6,13],
   CSWAP[12,7,14],
   CSWAP[12,8,16]
  },
  Integer.add{
   Carry[17,13,3,18]{ ccx[13,3,18], cx[13,3], ccx[17,3,18] },
   Carry[18,14,4,19]{ ccx[14,4,19], cx[14,4], ccx[18,4,19] },
   Carry[19,16,5,15]{ ccx[16,5,15], cx[16,5], ccx[19,5,15] },
   CX[16,5],
   Sum[19,16,5]{ cx[16,5], cx[19,5] },
   RCarry[18,14,4,19]{ ccx[18,4,19], cx[14,4], ccx[14,4,19] },
   Sum[18,14,4]{ cx[14,4], cx[18,4] },
   RCarry[17,13,3,18]{ ccx[17,3,18], cx[13,3], ccx[13,3,18] },
   Sum[17,13,3]{ cx[13,3], cx[17,3] }
  },
  Integer.cswap{
   CSWAP[12,6,13],
   CSWAP[12,7,14],
   CSWAP[12,8,16]
  }
 },
 MODULOADD_freeflag{
  Integer.sub{
   RSum[13,0,3]{ cx[13,3], cx[0,3] },
   Carry[13,0,3,14]{ ccx[0,3,14], cx[0,3], ccx[13,3,14] },
   RSum[14,1,4]{ cx[14,4], cx[1,4] },
   Carry[14,1,4,16]{ ccx[1,4,16], cx[1,4], ccx[14,4,16] },
   RSum[16,2,5]{ cx[16,5], cx[2,5] },
   CX[2,5],
   RCarry[16,2,5,15]{ ccx[16,5,15], cx[2,5], ccx[2,5,15] },
   RCarry[14,1,4,16]{ ccx[14,4,16], cx[1,4], ccx[1,4,16] },
   RCarry[13,0,3,14]{ ccx[13,3,14], cx[0,3], ccx[0,3,14] }
  },
  X[15],
  CX[15,12],
  X[15],
  Integer.add{
   Carry[13,0,3,14]{ ccx[0,3,14], cx[0,3], ccx[13,3,14] },
   Carry[14,1,4,16]{ ccx[1,4,16], cx[1,4], ccx[14,4,16] },
   Carry[16,2,5,15]{ ccx[2,5,15], cx[2,5], ccx[16,5,15] },
   CX[2,5],
   Sum[16,2,5]{ cx[2,5], cx[16,5] },
   RCarry[14,1,4,16]{ ccx[14,4,16], cx[1,4], ccx[1,4,16] },
   Sum[14,1,4]{ cx[1,4], cx[14,4] },
   RCarry[13,0,3,14]{ ccx[13,3,14], cx[0,3], ccx[0,3,14] },
   Sum[13,0,3]{ cx[0,3], cx[13,3] }
  }
 }
}
a =Integer[0,1,2]
b0=Integer[9,10,11]
n =Integer[6,7,8]
b =Integer[3,4,5,15]
---- simulator ----
CNOT(13,3)*CNOT(0,3)*C((0,3),X(14))*CNOT(0,3)*C((13,3),X(14))*CNOT(14,4)*CNOT(1,4)*C((1,4),X(16))*CNOT(1,4)*C((14,4),X(16))*CNOT(16,5)*C((16,5),X(15))*CNOT(2,5)*C((2,5),X(15))*C((14,4),X(16))*CNOT(1,4)*C((1,4),X(16))*C((13,3),X(14))*CNOT(0,3)*C((0,3),X(14))*X(15)*CNOT(15,12)*X(15)*C((0,3),X(14))*CNOT(0,3)*C((13,3),X(14))*C((1,4),X(16))*CNOT(1,4)*C((14,4),X(16))*C((2,5),X(15))*CNOT(2,5)*C((16,5),X(15))*CNOT(16,5)*C((14,4),X(16))*CNOT(1,4)*C((1,4),X(16))*CNOT(1,4)*CNOT(14,4)*C((13,3),X(14))*CNOT(0,3)*C((0,3),X(14))*CNOT(0,3)*CNOT(13,3)*C((12,8),X(16))*C((12,16),X(8))*C((12,8),X(16))*C((12,7),X(14))*C((12,14),X(7))*C((12,7),X(14))*C((12,6),X(13))*C((12,13),X(6))*C((12,6),X(13))*CNOT(17,3)*CNOT(13,3)*C((13,3),X(18))*CNOT(13,3)*C((17,3),X(18))*CNOT(18,4)*CNOT(14,4)*C((14,4),X(19))*CNOT(14,4)*C((18,4),X(19))*CNOT(19,5)*C((19,5),X(15))*CNOT(16,5)*C((16,5),X(15))*C((18,4),X(19))*CNOT(14,4)*C((14,4),X(19))*C((17,3),X(18))*CNOT(13,3)*C((13,3),X(18))*C((12,8),X(16))*C((12,16),X(8))*C((12,8),X(16))*C((12,7),X(14))*C((12,14),X(7))*C((12,7),X(14))*C((12,6),X(13))*C((12,13),X(6))*C((12,6),X(13))*CNOT(15,12)*C((6,3),X(13))*CNOT(6,3)*C((12,3),X(13))*C((7,4),X(14))*CNOT(7,4)*C((13,4),X(14))*C((8,5),X(15))*CNOT(8,5)*C((14,5),X(15))*CNOT(14,5)*C((13,4),X(14))*CNOT(7,4)*C((7,4),X(14))*CNOT(7,4)*CNOT(13,4)*C((12,3),X(13))*CNOT(6,3)*C((6,3),X(13))*CNOT(6,3)*CNOT(0,3)*C((0,3),X(13))*CNOT(0,3)*C((12,3),X(13))*CNOT(13,4)*CNOT(1,4)*C((1,4),X(14))*CNOT(1,4)*C((13,4),X(14))*CNOT(14,5)*C((14,5),X(15))*CNOT(2,5)*C((2,5),X(15))*C((13,4),X(14))*CNOT(1,4)*C((1,4),X(14))*C((12,3),X(13))*CNOT(0,3)*C((0,3),X(13))*CNOT(5,11)*CNOT(4,10)*CNOT(3,9)*H(7)*H(6)*X(8)*H(4)*H(3)*H(1)*H(0)*|00000000000000000000>
---- result ----
|00000000000100001001> OK 1+0 mod 4 = 1
|00000000010110101011> OK 3+2 mod 6 = 5
|00000000001101001000> OK 0+1 mod 5 = 1
|00000000001100000011> OK 3+1 mod 4 = 0
|00000000010111010000> OK 0+2 mod 7 = 2
|00000000000100000000> OK 0+0 mod 4 = 0
|00000000000111010010> OK 2+0 mod 7 = 2
|00000000011101000010> OK 2+3 mod 5 = 0
|00000000010101100010> OK 2+2 mod 5 = 4
|00000000001100001000> OK 0+1 mod 4 = 1
TIME_MODULOADD: 430.502 sec
